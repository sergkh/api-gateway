openapi: "3.0.0"
info:
  title: API overview
  description: >
              Most of the requests require authorization token to be sent in `X-Auth-Token`.
              To start working with API use `POST /users` to create an account and `POST /login` to retrieve an authorization token.
servers:
  - url: http://localhost:9000
    description: Local dev server
tags:
  - name: OAuth
    description: OAuth tokens and applications
  - name: Users
    description: Users management
  - name: Login
    description: Login/logout requests
  - name: Sessions
    description: User sessions request    
components:
  securitySchemes:
    api_key:
      type: apiKey
      description: Authorization Token
      name: X-Auth-Token
      in: header
    basicAuth:
      type: http
      scheme: basic  
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: '/authorization'
          tokenUrl: '/token'
          scopes:
            "users:read": "Read any user information"
            "users:edit": "Edit any user information"
            "users:block": "Block/Unblock users"
            "users:create": "Allows create users"
            "permissions:read": "Read global permissions configuration"
            "permissions:edit": "Edit global permissions configuration"
            "internal_web": "Internal web user"
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
          enum:
            - INTERNAL_SERVER_ERROR
            - USER_NOT_FOUND
            - INVALID_REQUEST
            - APPLICATION_NOT_FOUND
        message:
          type: string
          description: Error message description
        timestamp:
          type: integer
          description: Request timestamp
    RoleCreate:
       type: object
       properties:
          role:
            type: string
            description: user flag
          permissions:
            type: array
            description: user permission array
            items:
              type: string
    RolePermissions:
       type: object
       properties:
          permissions:
            type: array
            description: user permission status
            items:
              type: string
    User:
      type: object
      properties:
        uuid:
          type: string
          description: User unique identifier
        email:
          type: string
          required: false
          description: User email
        phone:
          type: string
          required: false
          description: User phone
        firstName:
          type: string
          required: false
          description: User first name
        lastName:
          type: string
          required: false
          description: User last name
        created:
          type: number
          description: User creation timestamp
    CreateBranch:
      type: object
      required:
       - name
      properties:
        name:
          type: string
          description: Branch Name
        description:
          type: string
        parent:
          type: string
          description: Parent branch Id
    AccessTokenByPassword:
      type: object
      required: [grant_type, username, password]
      properties:
        grant_type:
          type: string
          description: Grant type. 'password' in this case
          enum: [ password, refresh_token, authorization_code ]
        username:
          type: string
          description: Users name
        password:
          type: string
          description: Users password
        scope:
          type: string
          description: Space separated list of requested scopes
    AccessTokenByRefreshToken:
      type: object
      required: [grant_type, refresh_token]
      properties:
        grant_type:
          type: string
          description: Grant type. 'refresh_token' in this case
          enum: [ password, refresh_token, authorization_code ]
        refresh_token:
          type: string
          description: Previously obtained refresh token        
    AccessTokenByAuthCode:
      type: object
      required: [grant_type, code]
      properties:
        grant_type:
          type: string
          description: Grant type. 'authorization_code' in this case
          enum: [ password, refresh_token, authorization_code ]
        code:
          type: string
          description: Auth code obtained using /auth/* endpoint
        redirect_ui:
          type: string
          description: Optional redirect URL. Has to be enabled for client. If not set JSON response is returned
        client_id:
          type: string
          description: Client identifier