session {
  time = 15 minutes
  time = ${?SESSION_TIME}
  store = false
  store = ${?STORE_SESSIONS}
  cache = 15 minutes
  cache = ${?USER_CACHE_TTL}
}

auth {
  implicitFlowEnabled = true
  implicitFlowEnabled = ${?IMPLICIT_FLOW_ENABLED}

  authCodeTTL = 10 minutes

  refreshTokenTTL = 365 days
  refreshTokenTTL = ${?REFRESH_TOKEN_TTL}

  # Possible fields:
  # [roles, email, phone_number, flags, scope ]
  accesssTokenFields = [ "email", "roles", "scope" ]
}

confirmation {
  phone {
    length = 6
    length = ${?OTP_PHONE_LENGTH}
    ttl = 10 minutes
  }

  email {
    length = 32
    length = ${?OTP_EMAIL_LENGTH}
    ttl = 24 hours
  }
}

crypto {
  keystore {
    file = ${?KEYSTORE}
    password = ${?KEYSTORE_PASSWORD}
    
    # docker secrets version 
    passwordFile = ${?KEYSTORE_PASSWORD_FILE}
  }

  accessToken {
  
   # Alias of the key and certificate pair that would be used to sing
   # and verify access tokens
   signKeyAlias = ${?ACCESS_TOKEN_SIGN_KEY_ALIAS} 

   # Aliases of certificates that only used to verify access tokens
   # issued with previous signing key version. Used for key rotation
   # format alias1,alias2
   deprecatedKeyAliases = ${?ACCESS_TOKEN_DEPRECATED_KEY_ALIASES}
  }

  # AES key alias from the keystore that is used to sign
  # Access Codes and OTPs in the database
  authCodes {
    signKeyAlias = ${?CODES_SIGN_KEY_ALIAS}
  } 
}

silhouette {
  host = ${app.host}

  # Authenticator settings
  authenticator.fieldName = "X-Auth-Token"
  authenticator.requestParts = ["headers"]

  authenticator.issuerClaim = "https://localhost/"
  authenticator.issuerClaim = ${?AUTHENTICATOR_ISSUER_CLAIM}

  authenticator.encryptSubject = false

  authenticator.authenticatorExpiry = 360 minutes
  authenticator.authenticatorExpiry = ${?SESSION_EXPIRY_TIME}

  //used for touch in authenticator service method
  authenticator.authenticatorIdleTimeout = 15 minutes
  authenticator.authenticatorIdleTimeout = ${?AUTHENTICATOR_IDLE_TIMEOUT}
  
  authenticator.sharedSecret = "not-used"

  authenticator.signer.key = "feYaDEZrfzw6C+b29zEBkyDLqNQfFtMBWQ2d3u"
  authenticator.signer.key = ${play.http.secret.key}

  authenticator.crypter.key = "KPnuaYeBCZNAK2=9awL7ZPxeq7ghGCHEAU4Evv"
  authenticator.crypter.key = ${play.http.secret.key}

  authenticator.encoder = "crypter" // crypter | base64
  authenticator.encoder = ${?AUTHENTICATOR_ENCODER}

  # OAuth1 token secret provider settings
  oauth1TokenSecretProvider.cookieName="OAuth1TokenSecret"
  oauth1TokenSecretProvider.cookiePath="/"
  oauth1TokenSecretProvider.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldnt be set
  oauth1TokenSecretProvider.secureCookie=${?AUTH_SECURE_COOKIE}
  oauth1TokenSecretProvider.httpOnlyCookie=true
  oauth1TokenSecretProvider.expirationTime = 5 minutes

  oauth2StateProvider.cookieName = "CsrfState"
  oauth2StateProvider.cookiePath = "/"
  oauth2StateProvider.secureCookie = false // Disabled for testing on localhost without SSL, otherwise cookie couldnt be set
  oauth2StateProvider.secureCookie = ${?AUTH_SECURE_COOKIE}
  oauth2StateProvider.httpOnlyCookie = true
  oauth2StateProvider.expirationTime = 5 minutes

  social = [
    {
      type=facebook 
      enabled = false
      enabled = ${?FACEBOOK_ENABLED}
      authorizationURL="https://graph.facebook.com/v2.3/oauth/authorize"
      accessTokenURL="https://graph.facebook.com/v2.3/oauth/access_token"
      redirectURL=""${silhouette.host}"/auth/facebook"
      clientID=""
      clientID=${?FACEBOOK_CLIENT_ID}
      clientSecret=""
      clientSecret=${?FACEBOOK_CLIENT_SECRET}
      scope="email"
    },

    { 
      type=google
      enabled = false
      enabled = ${?GOOGLE_ENABLED}
      authorizationURL="https://accounts.google.com/o/oauth2/auth"
      accessTokenURL="https://accounts.google.com/o/oauth2/token"
      redirectURL=""${silhouette.host}"/auth/google"
      clientID=""
      clientID=${?GOOGLE_CLIENT_ID}
      clientSecret=""
      clientSecret=${?GOOGLE_CLIENT_SECRET}
      scope="profile email"
    },

    {
      type = twitter
      enabled = false
      enabled = ${?TWITTER_ENABLED}
      requestTokenURL="https://twitter.com/oauth/request_token"
      accessTokenURL="https://twitter.com/oauth/access_token"
      authorizationURL="https://twitter.com/oauth/authenticate"
      callbackURL=""${silhouette.host}"/authenticate/twitter"
      consumerKey=""
      consumerKey=${?TWITTER_CONSUMER_KEY}
      consumerSecret=""
      consumerSecret=${?TWITTER_CONSUMER_SECRET}
    },

    {
      type=xing
      enabled = false
      enabled = ${?XING_ENABLED}
      requestTokenURL="https://api.xing.com/v1/request_token"
      accessTokenURL="https://api.xing.com/v1/access_token"
      authorizationURL="https://api.xing.com/v1/authorize"
      callbackURL=""${silhouette.host}"/authenticate/xing"
      consumerKey=""
      consumerKey=${?XING_CONSUMER_KEY}
      consumerSecret=""
      consumerSecret=${?XING_CONSUMER_SECRET}
    },

    {
      type=yahoo
      enabled = false
      enabled = ${?YAHOO_ENABLED}      
      providerURL="https://me.yahoo.com/"
      callbackURL=""${silhouette.host}"/authenticate/yahoo"
      axRequired={
        "fullname": "http://axschema.org/namePerson",
        "email": "http://axschema.org/contact/email",
        "image": "http://axschema.org/media/image/default"
      }
      realm="${silhouette.host}"
    }
  ]
}
