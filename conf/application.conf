# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key = "2bRPbRFzX5Z6xoN12naQ7XsfgRthKEbTyDSuVy03"
play.http.secret.key = ${?PLAY_SECRET}

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Registers the error handler
# ~~~~~
play.http.errorHandler = "utils.ServerErrorHandler"

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
play.filters.headers.contentSecurityPolicy = null

mongodb.uri = "mongodb://mongo:27017/users"
mongodb.uri = ${?MONGO_URL}

# The application DI modules
# ~~~~~
play.modules.enabled += "module.InitializationModule"
# play.modules.enabled += "kamon.KamonModule"
play.modules.enabled += "module.GeneralModule"
play.modules.enabled += "module.SilhouetteModule"
play.modules.enabled += "module.ProxyModule"
play.modules.enabled += "module.RegistrationModule"
play.modules.enabled += "module.SessionsStoreModule"
play.modules.enabled += "module.RedisRequestsTrackingModule"
play.modules.enabled += "module.BranchesModule"
play.modules.enabled += "module.KafkaModule"
play.modules.enabled += "discovery.EtcdDiscoveryModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

play.filters.enabled = [
  "utils.filters.ShutdownFilter",
  "play.filters.headers.SecurityHeadersFilter",
  "play.filters.cors.CORSFilter"
#  "kamon.play.KamonFilter"
]

play.filters {

  # CSRF config
  csrf {

    # Token configuration
    token {
      # The token name
      name = "csrfToken"

      # Whether tokens should be signed or not
      sign = true
    }

    # Cookie configuration
    cookie {
      # If non null, the CSRF token will be placed in a cookie with this name
      name = "csrfToken"

      # Whether the cookie should be set to secure
      secure = ${play.http.session.secure}

      # Whether the cookie should have the HTTP only flag set
      httpOnly = false
    }

    # How much of the body should be buffered when looking for the token in the request body
    body.bufferSize = ${play.http.parser.maxMemoryBuffer}

    # Bypass the CSRF check if this origin is trusted by the CORS filter
    bypassCorsTrustedOrigins = true

    # Header configuration
    header {

      # The name of the header to accept CSRF tokens from.
      name = "Csrf-Token"

      # Defines headers that must be present to perform the CSRF check. If any of these headers are present, the CSRF
      # check will be performed.
      #
      # By default, we only perform the CSRF check if there are Cookies or an Authorization header.
      # Generally, CSRF attacks use a user's browser to execute requests on the client's behalf. If the user does not
      # have an active session, there is no danger of this happening.
      #
      # Setting this to null or an empty object will protect all requests.
      protectHeaders {
        Cookie = "*"
        Authorization = "*"
      }

      # Defines headers that can be used to bypass the CSRF check if any are present. A value of "*" simply
      # checks for the presence of the header. A string value checks for a match on that string.
      bypassHeaders {
        X-Requested-With = "*"
        Csrf-Token = "nocheck"
      }
    }

    # Method lists
    method {
      # If non empty, then requests will be checked if the method is not in this list.
      whiteList = ["GET", "HEAD", "OPTIONS"]

      # The black list is only used if the white list is empty.
      # Only check methods in this list.
      blackList = []
    }

    # Content type lists
    # If both white lists and black lists are empty, then all content types are checked.
    contentType {
      # If non empty, then requests will be checked if the content type is not in this list.
      whiteList = []

      # The black list is only used if the white list is empty.
      # Only check content types in this list.
      blackList = []
    }

    # The error handler.
    # Used by Play's built in DI support to locate and bind a request handler.  Must be one of the following:
    # - A FQCN that implements play.filters.csrf.CSRF.ErrorHandler (Scala).
    # - A FQCN that implements play.filters.csrf.CSRFErrorHandler (Java).
    # - provided, indicates that the application has bound an instance of play.filters.csrf.CSRF.ErrorHandler through some
    #   other mechanism.
    # If null, will attempt to load a class called CSRFErrorHandler in the root package, otherwise if that's
    # not found, will default to play.filters.csrf.CSRF.CSRFHttpErrorHandler, which delegates to the configured
    # HttpRequestHandler.
    errorHandler = null
  }

  # CORS filter configuration
  cors {

    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = [${?ALLOWED_ORIGIN0}, ${?ALLOWED_ORIGIN1}, ${?ALLOWED_ORIGIN2}, ${?ALLOWED_ORIGIN3}, ${?ALLOWED_ORIGIN4}, ${?ALLOWED_ORIGIN5},${?ALLOWED_ORIGIN6}, ${?ALLOWED_ORIGIN7}, ${?ALLOWED_ORIGIN8}, ${?ALLOWED_ORIGIN9}]

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour
  }
}

filters.shutdown {
  delay-time = 5 seconds
  delay-time = ${?APPLICATION_SHUTDOWN_DELAY_TIME}
}

# Cache configuration
# ~~~~~
play.cache.bindCaches = ["accounts", "users", "dynamic-users-cache", "dynamic-emails-cache", "dynamic-phones-cache", "dynamic-social-cache"]

play.http.parser.maxMemoryBuffer = 10GB
play.http.parser.maxDiskBuffer = 10GB

confirmation {
  urls = "" // "POST /users/:userId/accounts,GET /users/:userId"
  urls = ${?CONFIRMATION_URLS}

  otp {
    length = 6
    length = ${?OTP_LENGTH}
    email-length = 32
    email-length = ${?OTP_EMAIL_LENGTH}
  }
}

oauth {
  ttl = 3650 days
  ttl = ${?OATH_SESSION_TTL}
}

redis {
  host = "redis-mem://dev"
  host = ${?REDIS_HOST}
}

session {
  time = 15 minutes
  time = ${?SESSION_TIME}
  store = false
  store = ${?STORE_SESSIONS}
  cache = 15 minutes
  cache = ${?USER_CACHE_TTL}
}

app {
  requirePassword = true
  requirePassword = ${?REQUIRE_PASSWORD}

  defaultPasswordTTL = 30 days
  defaultPasswordTTL = ${?DEFAULT_PASSWORD_TTL}

  defaultAdmin = "admin@email.com"
  defaultAdmin = ${?DEFAULT_ADMIN}

  host = "http://localhost:9000"
  host = ${?HOST_ADDRESS}

  basePath = "/"
  basePath = ${?BASE_PATH}

  defaultAdminPermissions = [
    "users:read", "users:edit", "users:create", "users:block", "permissions:edit", "oauth_token:create",
    "permissions:read", "restrictions:read", "restrictions:edit", "branches:edit", "branches:read",
    "swagger:read", "swagger:edit", "internal_web"
  ]
}

swagger {
  host = "localhost:9000"
  host = ${?SWAGGER_DOMAIN}

  appName = "Default"
  appName = ${?SWAGGER_NAME}

  schema = ["http"]
  schema = [${?SWAGGER_API_SCHEMA}]

  path = ${app.basePath}

  client_id = "123456789"
  client_id = ${?SWAGGER_CLIENT_ID}

  client_secret = "changeme"
  client_secret = ${?SWAGGER_CLIENT_SECRET}

  swaggerV3 = false
  swaggerV3 = ${?SWAGGER_V3}
}

services = []

include "silhouette.conf"